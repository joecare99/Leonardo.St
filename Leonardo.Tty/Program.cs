// ***********************************************************************
// Assembly         : Leonardo
// Author           : Mir
// Created          : 12-23-2021
//
// Last Modified By : Mir
// Last Modified On : 10-22-2022
// ***********************************************************************
// <copyright file="Program.cs" company="JC-Soft">
//     Copyright © JC-Soft 2021
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Drawing;
using ConsoleLib;
using ConsoleLib.CommonControls;
using System.Windows.Forms;
using Leonardo.Views;
using CommunityToolkit.Mvvm.DependencyInjection;
using Microsoft.Extensions.DependencyInjection;
using Leonardo.Models.Interfaces;
using Leonardo.Models;
using Leonardo.ViewModels.Interfaces;
using Leonardo.ViewModels;
using ConsoleLib.ConsoleLib.Interfaces;
using BaseLib.Interfaces;
using BaseLib.Models;

/// <summary>
/// The Leonardo namespace.
/// </summary>
/// <autogeneratedoc />
namespace Leonardo;

/// <summary>
/// Class Program.
/// </summary>
public class Program
{
    /// <summary>
    /// The mouse
    /// </summary>
    private static Pixel Mouse = new();
    /// <summary>
    /// The application
    /// </summary>
    private static ConsoleLib.CommonControls.Application App;

    /// <summary>
    /// Initializes static members of the <see cref="Program" /> class.
    /// </summary>
    static Program() {
    }

    /// <summary>
    /// Defines the entry point of the application.
    /// </summary>
    /// <param name="args">The arguments.</param>
    static void Main(string[] _)
    {
        Init();
     
        App.Run();

        Console.Write("Programm end ...");
        ExtendedConsole.Stop();
    }

    public static void Init()
    {
        var sp = new ServiceCollection()
         .AddSingleton<ILeonardoClass, LeonardoClass>()
         .AddTransient<ILeonardoViewModel, LeonardoViewModel>()
         .AddSingleton<IOpenFileDialog, OpenFileProxy>()
         .AddSingleton<ISaveFileDialog, SaveFileProxy>()
         .AddSingleton<IApplication>(BuildApp)
         .AddSingleton<ISteganography, Steganography>()
         .AddTransient<IHttpClient, HttpClientProxy>()
         .AddTransient<IConsole, ConsoleProxy>()
         .AddTransient<LeonardoView, LeonardoView>()
         .AddTransient<Views.InputDialog, Views.InputDialog>()
      //   .AddTransient<Views.LoadingDialog, Views.LoadingDialog>()
         .BuildServiceProvider();

        Ioc.Default.ConfigureServices(sp);


        var LeonardoView = Ioc.Default.GetRequiredService<LeonardoView>();

        App.Visible = true;
        App.Draw();
        App.OnMouseMove += App_MouseMove;
        App.OnCanvasResize += App_CanvasResize;
    }

    private static IApplication BuildApp(IServiceProvider provider)
    {
        if (App != null) return App; 
        var cl = ConsoleFramework.Canvas.ClipRect;
        cl.Inflate(-3, -3);
        Console.ForegroundColor = ConsoleColor.White;

        App = new ConsoleLib.CommonControls.Application(Ioc.Default.GetRequiredService<IConsole>())
        {
            Visible = false,
            Border = ConsoleFramework.singleBorder,
            ForeColor = ConsoleColor.Gray,
            BackColor = ConsoleColor.DarkGray,
            BoarderColor = ConsoleColor.Green,
            Dimension = cl
        };

        //Mouse.Set(0, 0, " ");
        //Mouse.BackColor = ConsoleColor.Red;
        //Mouse.Parent = App;
        //// t.Draw(10, 40, ConsoleColor.Gray);
        
        return App;
    }

    /// <summary>
    /// Applications the canvas resize.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The e.</param>
    private static void App_CanvasResize(object? sender, Point e)
    {
        var cl = ConsoleFramework.Canvas.ClipRect;
        cl.Inflate(-3, -3);
        App.Dimension = cl;
    }

    /// <summary>
    /// Handles the MouseMove event of the App control.
    /// </summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">The <see cref="MouseEventArgs" /> instance containing the event data.</param>
    private static void App_MouseMove(object? sender, MouseEventArgs e)
    {
 //       Mouse.Set(Point.Subtract(e.Location, (Size?)Mouse.Parent?.Position??Size.Empty));
    }

}

